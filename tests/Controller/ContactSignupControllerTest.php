<?php

namespace App\Tests\Controller;

use App\Controller\Contact\ContactSignupController;
use App\Model\DynamicDto;
use App\Repository\ContactRepository;
use PHPUnit\Framework\Attributes\CoversClass;
use Spatie\Snapshots\MatchesSnapshots;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Faker\Factory;

#[CoversClass(ContactSignupController::class)]
class ContactSignupControllerTest extends WebTestCase
{
    use MatchesSnapshots;

    private static array $contactTestIds = [];
    private static ?DynamicDto $signupStep1Contact;
    protected static ?KernelBrowser $client = null;
    protected static ContactRepository $contactRepository;

    public function setUp(): void
    {
        self::$contactRepository = static::getContainer()->get(ContactRepository::class);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function getBrowserWithoutLogin(): void
    {
        self::ensureKernelShutdown();

        self::$client = static::createClient([], []);
    }

    public function testStep1Form(): void
    {
        $faker = Factory::create();
        $formData = [
            'email' => $faker->email,
        ];

        $this->getBrowserWithoutLogin();

        self::$client->request('POST', '/signup/step1',[],[],[], json_encode($formData));

        $this->assertResponseIsSuccessful();

        $this->assertSame(200, self::$client->getResponse()->getStatusCode());
        $responseData = json_decode(self::$client->getResponse()->getContent(), true);

        $this->assertIsArray($responseData);
        $this->assertArrayHasKey('success', $responseData);

        $this->assertEmailCount(1);

        $email = $this->getMailerMessage();

        $this->assertEmailHtmlBodyContains($email,'Signup here:');

        self::$signupStep1Contact = self::$contactRepository->findMostRecent();
    }

    public function testStep2Form(): void
    {
        $faker = Factory::create();
        $formData = [
            'url' => 'test',
            'name' => $faker->company,
            'firstname' => $faker->firstName,
            'lastname' => $faker->lastName,
            'uid' => '333.333.333',
            'zip' => $faker->numberBetween(1111, 9999),
            'city' => $faker->city,
            'street' => $faker->streetAddress,
        ];

        $this->getBrowserWithoutLogin();

        self::$client->request(
            'POST',
            '/signup/step2/' . self::$signupStep1Contact->getTextField('signup_token'),
            [],
            [],
            [], json_encode($formData),
        );

        $this->assertResponseIsSuccessful();
        $this->assertSame(201, self::$client->getResponse()->getStatusCode());
        $responseData = json_decode(self::$client->getResponse()->getContent(), true);
        $this->assertIsArray($responseData);
        $this->assertArrayHasKey('success', $responseData);
    }

    public static function tearDownAfterClass(): void
    {
        $contactRepo = static::getContainer()->get(ContactRepository::class);
        if (self::$signupStep1Contact) {
            $contactRepo->removeById(self::$signupStep1Contact->getId());
        }
    }
}
